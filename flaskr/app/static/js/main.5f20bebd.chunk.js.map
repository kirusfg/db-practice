{"version":3,"sources":["views/Records.tsx","components/User.tsx","views/Users.tsx","views/Stats.tsx","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SortOrder","Records","useState","count","setCount","pageCount","setPageCount","records","setRecords","currentPage","setCurrentPage","number","setNumber","sortField","setSortField","asc","sortOrder","setSortOrder","author","useLocation","pathname","slice","useEffect","page","URI","fetch","then","res","json","data","Math","ceil","catch","err","console","error","getPage","Table","celled","Header","Row","HeaderCell","colSpan","Body","map","record","index","Cell","country","population","disease","toUpperCase","s","pathogen","charAt","deaths","cured","discover_country","Date","first_enc_date","toLocaleDateString","to","email","name","surname","Footer","Menu","compact","horizontal","Dropdown","item","text","Item","onClick","desc","Pagination","activePage","boundaryRange","onPageChange","_","siblingRange","totalPages","User","props","image","setImage","setRecordCount","phone","salary","degree","department","results","picture","medium","Card","Content","Image","floated","size","rounded","src","Meta","Description","extra","Button","primary","as","Link","Icon","Users","useParams","users","setUsers","url","undefined","sort","a","b","getUsers","Group","centered","user","capitalize","Stats","countries","diseases","publicServants","stats","setStats","servants","setServants","infectiousDiseases","setInfectiousDiseases","newestDiseases","setNewestDiseases","diseaseTypes","setDiseaseTypes","doctors","setDoctors","images","setImages","push","Grid","divided","style","columns","Column","width","textAlign","icon","Subheader","collapsing","basic","servant","i","doctor","specializations","length","reduce","spec","Statistic","widths","Value","Label","infected","type","App","inverted","Container","header","logo","marginRight","simple","element","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f20bebd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport {\n  Table,\n  Pagination,\n  PaginationProps,\n  Menu,\n  Dropdown,\n} from 'semantic-ui-react';\n\n\ntype Record = {\n  country: string;\n  population: string;\n  cured: number;\n  deaths: number;\n  discover_country: string;\n  disease: string;\n  pathogen: string;\n  disease_code: string;\n  email: string;\n  first_enc_date: string;\n  name: string;\n  surname: string;\n}\n\nenum SortOrder {\n  asc = \"asc\",\n  desc = \"desc\"\n}\n\nfunction capitalize(s: string) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n\nfunction Records() {\n  // Records\n  const [count, setCount] = useState(0);\n  const [pageCount, setPageCount] = useState(0);\n  const [records, setRecords] = useState([]);\n\n  // Pagination\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [number, setNumber] = useState<number>(10);\n\n  // Sorting\n  const [sortField, setSortField] = useState<string>(\"disease\");\n  const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.asc);\n\n  // Author\n  const author = useLocation().pathname.slice(9);\n\n  function getPage(page: number): void {\n    var URI = `/api/v1/records?page=${page - 1}&number=${number}&sortField=${sortField}&sortOrder=${sortOrder}`;\n    if (author) {\n      URI += `&author=${author}`;\n    }\n    fetch(URI)\n      .then((res) => res.json())\n      .then((data) => {\n        const { count, records } = data;\n        setRecords(records);\n        setCount(count);\n        setPageCount(Math.ceil(count / number));\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  useEffect(() => {\n    getPage(currentPage);\n  }, [currentPage, sortOrder, sortField, number]);\n\n  \n  return (\n    <>\n    <Table celled>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell>№</Table.HeaderCell>\n        <Table.HeaderCell>Country</Table.HeaderCell>\n        <Table.HeaderCell>Population</Table.HeaderCell>\n        <Table.HeaderCell>Disease</Table.HeaderCell>\n        <Table.HeaderCell>Pathogen</Table.HeaderCell>\n        <Table.HeaderCell>Deaths</Table.HeaderCell>\n        <Table.HeaderCell>Cured</Table.HeaderCell>\n        <Table.HeaderCell colSpan='2'>Disease discovered in</Table.HeaderCell>\n        <Table.HeaderCell>Author</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n\n    <Table.Body>\n      {records && records.map((record: Record, index: number) => (\n        <Table.Row key={index}>\n          <Table.Cell>{(currentPage - 1) * number + index + 1}</Table.Cell>\n          <Table.Cell>{record.country}</Table.Cell>\n          <Table.Cell>{record.population}</Table.Cell>\n          <Table.Cell>{record.disease.toUpperCase()}</Table.Cell>\n          <Table.Cell>{capitalize(record.pathogen)}</Table.Cell>\n          <Table.Cell>{record.deaths}</Table.Cell>\n          <Table.Cell>{record.cured}</Table.Cell>\n          <Table.Cell>{record.discover_country}</Table.Cell>\n          <Table.Cell>{new Date(record.first_enc_date).toLocaleDateString()}</Table.Cell>\n          <Table.Cell><Link to={`/users/${record.email}`}>{`${record.name} ${record.surname}`}</Link></Table.Cell>\n        </Table.Row>\n      ))}\n    </Table.Body>\n\n    <Table.Footer>\n      <Table.Row>\n        <Table.HeaderCell colSpan='1'>\n          {count}\n        </Table.HeaderCell>\n\n        <Table.HeaderCell colSpan='3'>\n          <Menu compact horizontal>\n            <Dropdown item text='Sort by'>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"country\");\n                  setCurrentPage(1);\n                }}>\n                  Country\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"population\");\n                  setCurrentPage(1);\n                }}>\n                  Population\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"disease\");\n                  setCurrentPage(1);\n                }}>\n                  Disease\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"pathogen\");\n                  setCurrentPage(1);\n                }}>\n                  Pathogen\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"deaths\");\n                  setCurrentPage(1);\n                }}>\n                  Deaths\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"cured\");\n                  setCurrentPage(1);\n                }}>\n                  Cured\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"discover_country\");\n                  setCurrentPage(1);\n                }}>\n                  Discovery country\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"first_enc_date\");\n                  setCurrentPage(1);\n                }}>\n                  Discovery date\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            <Dropdown item text='Order'>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => {\n                  setSortOrder(SortOrder.asc);\n                  setCurrentPage(1);\n                }}>\n                  Ascending\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortOrder(SortOrder.desc);\n                  setCurrentPage(1);\n                }}>\n                  Descending\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            <Dropdown item text='Results'>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => {\n                  setNumber(5);\n                  setCurrentPage(1);\n                }}>\n                  5\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setNumber(10);\n                  setCurrentPage(1);\n                }}>\n                  10\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setNumber(20);\n                  setCurrentPage(1);\n                }}>\n                  20\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setNumber(50);\n                  setCurrentPage(1);\n                }}>\n                  50\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </Menu>\n        </Table.HeaderCell>\n        \n        <Table.HeaderCell colSpan='7'>\n         <Pagination\n            activePage={currentPage}\n            boundaryRange={1}\n            onPageChange={(_: any, data: PaginationProps) => {\n              const { activePage } = data;\n              if (typeof(activePage) === \"number\") {\n                setCurrentPage(activePage);\n              }\n            }}\n            siblingRange={1}\n            totalPages={pageCount}\n          /> \n        </Table.HeaderCell>\n      </Table.Row>\n    </Table.Footer>\n  </Table>\n  </>\n  );\n}\n\nexport default Records;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  Image,\n  Icon,\n  Button\n} from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\n\n\nexport type UserProps = {\n  name: string;\n  surname: string;\n  email: string;\n  country: string;\n  phone: string;\n  salary: null | number;\n  degree: null | string;\n  department: null | string;\n}\n\nexport default function User(props: UserProps) {\n  const [image, setImage] = useState<string>(\"\");\n  const [count, setRecordCount] = useState<number>(0);\n  const { name, surname, email, country, phone, salary, degree, department } = props;\n\n  useEffect(() => {\n    if (department) {\n      fetch(`/api/v1/stats/user/${email}`)\n        .then((res) => res.json())\n        .then((data) => setRecordCount(data[\"count\"]));\n    }\n    fetch(\"https://randomuser.me/api/\")\n      .then((res) => res.json())\n      .then((data) => setImage(data.results[0].picture.medium));\n  }, [department, email]);\n\n  return (\n    <Card>\n      <Card.Content>\n        <Image\n          floated='right'\n          size='mini'\n          rounded\n          src={image}\n        />\n        <Card.Header>{name + \" \" + surname}</Card.Header>\n        <Card.Meta>{email}</Card.Meta>\n        <Card.Meta>{phone}</Card.Meta>\n        <Card.Description>From {country}</Card.Description>\n        {degree && <Card.Description>{`Doctor, ${degree}`}</Card.Description>}\n        {department && <Card.Description>{`Works as a public servant in department ${department}`}</Card.Description>}\n      </Card.Content> \n      {department && \n        (<Card.Content extra>\n          <Button primary as={Link} to={`/records/${email}`}>\n            View {count} records\n          </Button>\n        </Card.Content>)\n      }\n      <Card.Content extra>\n        <Icon name='dollar' />{salary}/year\n      </Card.Content>\n      <Card.Content extra>\n        <Icon name='map pin' />{country}\n      </Card.Content>\n    </Card>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Card\n} from 'semantic-ui-react';\nimport User, { UserProps } from '../components/User'\n\n\nfunction Users() {\n  const email: undefined | string = useParams().email;\n  const [users, setUsers] = useState<UserProps[]>([]);\n\n  function getUsers(email?: string) {\n    const url = \"/api/v1/users\" + ((email !== undefined) ? `?email=${email}` : \"\");\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n          data.sort((a: UserProps, b: UserProps) => {\n            if (a.department && b.department) {\n              return 0;\n            } else if (a.department && !b.department) {\n              return -1;\n            } else {\n              return 1;\n            }\n          });\n          setUsers(data);\n      });\n  }\n\n  useEffect(() => {\n    getUsers(email);\n  }, [email]);\n\n  return (\n    <Card.Group centered>\n    {users && users.map((user: UserProps) => <User key={user.email} {...user} />)}\n    </Card.Group>\n  );\n}\n\nexport default Users;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport {\n  Statistic,\n  Table,\n  Header,\n  Image,\n  Icon,\n  Grid\n} from 'semantic-ui-react';\n\n\ntype Statistics = {\n  countries: number;\n  diseases: number;\n  records: number;\n  publicServants: number;\n};\n\ntype Servant = {\n  email: string;\n  name: string;\n  surname: string;\n  records: number;\n  department: string;\n}\n\ntype Doctor = {\n  email: string;\n  name: string;\n  surname: string;\n  specializations: string[];\n  degree: string;\n}\n\ntype Disease = {\n  name: string;\n  pathogen: string;\n  infected: number;\n  first_enc_date: string;\n  country: string;\n};\n\ntype DiseaseType = {\n  name: string;\n  diseases: number;\n}\n\n\nfunction capitalize(s: string) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n\nfunction Stats() {\n  const [stats, setStats] = useState<Statistics>({countries: 0, diseases: 0, records: 0, publicServants: 0});\n  const [servants, setServants] = useState<Servant[]>([]);\n  const [infectiousDiseases, setInfectiousDiseases] = useState<Disease[]>([]);\n  const [newestDiseases, setNewestDiseases] = useState<Disease[]>([]);\n  const [diseaseTypes, setDiseaseTypes] = useState<DiseaseType[]>([]);\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [images, setImages] = useState<string[]>([]);\n\n  useEffect(() => {\n    fetch(\"/api/v1/stats\")\n      .then((res) => res.json())\n      .then((data) => setStats(data));\n\n    fetch(\"/api/v1/stats/top/servants\")\n      .then((res) => res.json())\n      .then((data) => setServants(data));\n\n    fetch(\"/api/v1/stats/top/diseases/infected\")\n      .then((res) => res.json())\n      .then((data) => setInfectiousDiseases(data));\n\n    fetch(\"/api/v1/stats/top/diseases/newest\")\n      .then((res) => res.json())\n      .then((data) => setNewestDiseases(data));\n\n    fetch(\"/api/v1/stats/top/diseases/types\")\n      .then((res) => res.json())\n      .then((data) => setDiseaseTypes(data));\n\n    fetch(\"/api/v1/stats/top/doctors\")\n      .then((res) => res.json())\n      .then((data) => setDoctors(data));\n\n    fetch(\"https://randomuser.me/api/?results=10\")\n      .then((res) => res.json())\n      .then((data) => {\n        let images: string[] = [];\n        data.results.map((res: any) => images.push(res.picture.medium));\n        setImages(images); });\n  }, []);\n\n\n  return (\n    <>\n    <Grid divided='vertically' style={{\"marginTop\": \"2em\"}}>\n      <Grid.Row columns={3} centered>\n        <Grid.Column width=\"5\" textAlign=\"center\">\n          <Header as=\"h3\" icon>\n            <Icon name='clipboard outline'/>\n            Top activists\n            <Header.Subheader>\n              Servants with highest number of records created\n            </Header.Subheader>\n          </Header>\n\n          <Table collapsing basic='very' style={{\"margin\": \"2em auto 0 auto\"}}>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Public servant</Table.HeaderCell>\n                <Table.HeaderCell>Records</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {servants && servants.map((servant: Servant, i: number) => (\n                <Table.Row>\n                  <Table.Cell>\n                    <Header as='h4' image>\n                      <Image rounded src={images[i]} />\n                      <Header.Content as={Link} to={`/users/${servant.email}`}>\n                        {`${servant.name} ${servant.surname}`}\n                        <Header.Subheader>{servant.department}</Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                  </Table.Cell>\n                  <Table.Cell>{servant.records}</Table.Cell>\n                </Table.Row>\n              ))}\n              \n            </Table.Body>\n          </Table>\n        </Grid.Column>\n\n        <Grid.Column width=\"11\" textAlign=\"center\">\n          <Header as=\"h3\" icon>\n            <Icon name='user md' />\n            Best specialists\n            <Header.Subheader>\n              Doctors who specialize in many disease types\n            </Header.Subheader>\n          </Header> \n\n          <Table collapsing basic='very' style={{\"margin\": \"2em auto 0 auto\"}}>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Doctor</Table.HeaderCell>\n                <Table.HeaderCell>Number</Table.HeaderCell>\n                <Table.HeaderCell>Specializations</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {doctors && doctors.map((doctor: Doctor, i: number) => (\n                <Table.Row>\n                  <Table.Cell>\n                    <Header as='h4' image>\n                      <Image rounded src={images[i + 5]} />\n                      <Header.Content as={Link} to={`/users/${doctor.email}`}>\n                        {`${doctor.name} ${doctor.surname}`}\n                        <Header.Subheader>{doctor.degree}</Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                  </Table.Cell>\n                  <Table.Cell>{doctor.specializations.length}</Table.Cell>\n                  <Table.Cell>\n                    {doctor.specializations.reduce((spec, s, i) => \n                      capitalize(spec) + \n                      ((i < doctor.specializations.length) ? \", \" : \"\") +\n                      capitalize(s)\n                    )}\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body> \n          </Table>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n\n    <Statistic.Group widths=\"four\" size=\"large\" style={{\"marginTop\": \"2em\"}}>\n      <Statistic>\n        <Statistic.Value>{stats.records}</Statistic.Value>\n        <Statistic.Label>Records</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{stats.countries}</Statistic.Value>\n        <Statistic.Label>Countries</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{stats.diseases}</Statistic.Value>\n        <Statistic.Label>Diseases</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{stats.publicServants}</Statistic.Value>\n        <Statistic.Label>Public Servants</Statistic.Label>\n      </Statistic>\n    </Statistic.Group>\n\n    <Grid divided='vertically' style={{\"marginTop\": \"4em\"}}>\n      <Header textAlign=\"center\" as=\"h3\" icon>\n        <Icon name='line graph' />\n        Diseases\n        <Header.Subheader>\n          Diseases ranked by the number of people infected\n        </Header.Subheader>\n      </Header>\n\n      <Grid.Row columns={3} centered>\n        <Grid.Column width=\"5\" textAlign=\"center\">\n          <Header textAlign=\"center\" as=\"h4\">\n            Most infectious\n            <Header.Subheader>\n              Total number of infected\n            </Header.Subheader>\n          </Header>\n\n          <Table collapsing basic='very' style={{\"margin\": \"2em auto 0 auto\"}}>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Disease</Table.HeaderCell>\n                <Table.HeaderCell>People infected</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {infectiousDiseases && infectiousDiseases.map((disease: Disease) => (\n                <Table.Row>\n                  <Table.Cell>\n                    <Header as='h4'>\n                      <Header.Content>\n                        {disease.name.toUpperCase()}\n                        <Header.Subheader>{disease.pathogen}</Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                  </Table.Cell>\n                  <Table.Cell>{disease.infected}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </Grid.Column> \n\n        <Grid.Column width=\"5\" textAlign=\"center\">\n          <Header textAlign=\"center\" as=\"h4\">\n            Newest\n            <Header.Subheader>\n              Diseases discovered recently\n            </Header.Subheader>\n          </Header>\n\n          <Table collapsing basic='very' style={{\"margin\": \"2em auto 0 auto\"}}>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Disease</Table.HeaderCell>\n                <Table.HeaderCell>Date</Table.HeaderCell>\n                <Table.HeaderCell>Country</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {newestDiseases && newestDiseases.map((disease: Disease) => (\n                <Table.Row>\n                  <Table.Cell>\n                    <Header as='h4'>\n                      <Header.Content>\n                        {disease.name.toUpperCase()}\n                        <Header.Subheader>{disease.pathogen}</Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                  </Table.Cell>\n                  <Table.Cell>{disease.country}</Table.Cell>\n                  <Table.Cell>{new Date(disease.first_enc_date).toLocaleDateString()}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </Grid.Column>\n      \n        <Grid.Column width=\"5\" textAlign=\"center\">\n          <Header textAlign=\"center\" as=\"h4\">\n            Types\n            <Header.Subheader>\n              Most common disease types\n            </Header.Subheader>\n          </Header>\n\n          <Table collapsing basic='very' style={{\"margin\": \"2em auto 0 auto\"}}>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Type</Table.HeaderCell>\n                <Table.HeaderCell>Diseases</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {diseaseTypes && diseaseTypes.map((type: DiseaseType) => (\n                <Table.Row>\n                  <Table.Cell>\n                    <Header as='h4'>\n                      <Header.Content>\n                        {capitalize(type.name)}\n                      </Header.Content>\n                    </Header>\n                  </Table.Cell>\n                  <Table.Cell>{type.diseases}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n    </>\n  );\n}\n\nexport default Stats;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { Menu, Container, Image, Dropdown } from 'semantic-ui-react'\nimport { Routes, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nimport Records from './views/Records'\nimport Users from './views/Users'\nimport Stats from './views/Stats'\nimport logo from './logo.svg'\n\n\nfunction App() {\n  return (\n    <>\n      <Menu inverted>\n        <Container>\n          <Menu.Item as={Link} to='/' header>\n            <Image size='mini' src={logo} style={{ marginRight: '1.5em' }} />\n            DB HW\n          </Menu.Item>\n          <Dropdown item simple text='Data'>\n            <Dropdown.Menu>\n              <Dropdown.Item as={Link} to='/records'>Records</Dropdown.Item>\n              <Dropdown.Item as={Link} to='/stats'>Statistics</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n          <Menu.Item as={Link} to='/users'>Users</Menu.Item>\n        </Container>\n      </Menu>\n      <Container>\n        <Routes>\n          <Route index element={<Stats />} />\n          <Route path=\"records\" element={<Records />} />\n          <Route path=\"records/:email\" element={<Records />} />\n          <Route path=\"stats\" element={<Stats />} />\n          <Route path=\"users\" element={<Users />} />\n          <Route path=\"users/:email\" element={<Users />} />\n        </Routes>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}