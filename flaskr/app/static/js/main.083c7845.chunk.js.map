{"version":3,"sources":["views/Data.tsx","components/User.tsx","views/Users.tsx","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SortOrder","Data","useState","count","setCount","pageCount","setPageCount","records","setRecords","countries","diseases","publicServants","stats","setStats","currentPage","setCurrentPage","number","setNumber","sortField","setSortField","asc","sortOrder","setSortOrder","useEffect","fetch","then","res","json","data","console","log","Math","ceil","catch","err","error","Statistic","Group","widths","Value","Label","Table","sortable","celled","Header","Row","HeaderCell","colSpan","Body","map","record","index","Cell","country","population","disease","toUpperCase","s","pathogen","charAt","slice","deaths","cured","discover_country","Date","first_enc_date","toLocaleDateString","to","email","name","surname","Footer","Menu","compact","horizontal","Dropdown","item","text","Item","onClick","desc","Pagination","activePage","boundaryRange","onPageChange","_","siblingRange","totalPages","User","props","image","setImage","phone","salary","degree","department","results","picture","medium","Card","Content","Image","floated","size","rounded","src","Meta","Description","extra","Icon","Users","useParams","users","setUsers","url","undefined","getUsers","centered","user","App","inverted","Container","as","Link","header","logo","style","marginRight","element","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.083c7845.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Table,\n  Pagination,\n  PaginationProps,\n  Menu,\n  Dropdown,\n  Statistic\n} from 'semantic-ui-react';\n\n\ntype Record = {\n  country: string;\n  population: string;\n  cured: number;\n  deaths: number;\n  discover_country: string;\n  disease: string;\n  pathogen: string;\n  disease_code: string;\n  email: string;\n  first_enc_date: string;\n  name: string;\n  surname: string;\n}\n\nenum SortOrder {\n  asc = \"asc\",\n  desc = \"desc\"\n}\n\ntype Stats = {\n  countries: number;\n  diseases: number;\n  records: number;\n  publicServants: number;\n};\n\nfunction capitalize(s: string) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n\nfunction Data() {\n  // Records\n  const [count, setCount] = useState(0);\n  const [pageCount, setPageCount] = useState(0);\n  const [records, setRecords] = useState([]);\n\n  // Stats\n  const [stats, setStats] = useState<Stats>({countries: 0, diseases: 0, records: 0, publicServants: 0});\n  \n  // Pagination\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [number, setNumber] = useState<number>(10);\n\n  // Sorting\n  const [sortField, setSortField] = useState<string>(\"disease\");\n  const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.asc);\n\n  function getPage(page: number): void {\n    fetch(`/api/v1/records?page=${page - 1}&number=${number}&sortField=${sortField}&sortOrder=${sortOrder}`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        const { count, records } = data;\n        setRecords(records);\n        setCount(count);\n        setPageCount(Math.ceil(count / number));\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  useEffect(() => {\n    getPage(currentPage);\n  }, [currentPage, sortOrder, sortField, number]);\n\n  useEffect(() => {\n    fetch(\"/api/v1/stats\")\n      .then((res) => res.json())\n      .then((data) => setStats(data));\n  }, []);\n\n\n  return (\n    <>\n    <Statistic.Group widths=\"four\">\n      <Statistic>\n        <Statistic.Value>{stats.records}</Statistic.Value>\n        <Statistic.Label>Records</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{stats.countries}</Statistic.Value>\n        <Statistic.Label>Countries</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{stats.diseases}</Statistic.Value>\n        <Statistic.Label>Diseases</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{stats.publicServants}</Statistic.Value>\n        <Statistic.Label>Public Servants</Statistic.Label>\n      </Statistic>\n    </Statistic.Group>\n    <Table sortable celled>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell>№</Table.HeaderCell>\n        <Table.HeaderCell>Country</Table.HeaderCell>\n        <Table.HeaderCell>Population</Table.HeaderCell>\n        <Table.HeaderCell>Disease</Table.HeaderCell>\n        <Table.HeaderCell>Pathogen</Table.HeaderCell>\n        <Table.HeaderCell>Deaths</Table.HeaderCell>\n        <Table.HeaderCell>Cured</Table.HeaderCell>\n        <Table.HeaderCell colSpan='2'>Disease discovered in</Table.HeaderCell>\n        <Table.HeaderCell>Author</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n\n    <Table.Body>\n      {records && records.map((record: Record, index: number) => (\n        <Table.Row key={index}>\n          <Table.Cell>{(currentPage - 1) * number + index + 1}</Table.Cell>\n          <Table.Cell>{record.country}</Table.Cell>\n          <Table.Cell>{record.population}</Table.Cell>\n          <Table.Cell>{record.disease.toUpperCase()}</Table.Cell>\n          <Table.Cell>{capitalize(record.pathogen)}</Table.Cell>\n          <Table.Cell>{record.deaths}</Table.Cell>\n          <Table.Cell>{record.cured}</Table.Cell>\n          <Table.Cell>{record.discover_country}</Table.Cell>\n          <Table.Cell>{new Date(record.first_enc_date).toLocaleDateString()}</Table.Cell>\n          <Table.Cell><Link to={`/users/${record.email}`}>{`${record.name} ${record.surname}`}</Link></Table.Cell>\n        </Table.Row>\n      ))}\n    </Table.Body>\n\n    <Table.Footer>\n      <Table.Row>\n        <Table.HeaderCell colSpan='1'>\n          {count}\n        </Table.HeaderCell>\n\n        <Table.HeaderCell colSpan='3'>\n          <Menu compact horizontal>\n            <Dropdown item text='Sort by'>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"country\");\n                  setCurrentPage(1);\n                }}>\n                  Country\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"population\");\n                  setCurrentPage(1);\n                }}>\n                  Population\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"disease\");\n                  setCurrentPage(1);\n                }}>\n                  Disease\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"pathogen\");\n                  setCurrentPage(1);\n                }}>\n                  Pathogen\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"deaths\");\n                  setCurrentPage(1);\n                }}>\n                  Deaths\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"cured\");\n                  setCurrentPage(1);\n                }}>\n                  Cured\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"discover_country\");\n                  setCurrentPage(1);\n                }}>\n                  Discovery country\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortField(\"first_enc_date\");\n                  setCurrentPage(1);\n                }}>\n                  Discovery date\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            <Dropdown item text='Order'>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => {\n                  setSortOrder(SortOrder.asc);\n                  setCurrentPage(1);\n                }}>\n                  Ascending\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setSortOrder(SortOrder.desc);\n                  setCurrentPage(1);\n                }}>\n                  Descending\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            <Dropdown item text='Results'>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => {\n                  setNumber(5);\n                  setCurrentPage(1);\n                }}>\n                  5\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setNumber(10);\n                  setCurrentPage(1);\n                }}>\n                  10\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setNumber(20);\n                  setCurrentPage(1);\n                }}>\n                  20\n                </Dropdown.Item>\n                <Dropdown.Item onClick={() => {\n                  setNumber(50);\n                  setCurrentPage(1);\n                }}>\n                  50\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </Menu>\n        </Table.HeaderCell>\n        \n        <Table.HeaderCell colSpan='7'>\n         <Pagination\n            activePage={currentPage}\n            boundaryRange={1}\n            onPageChange={(_: any, data: PaginationProps) => {\n              const { activePage } = data;\n              if (typeof(activePage) === \"number\") {\n                setCurrentPage(activePage);\n              }\n            }}\n            siblingRange={1}\n            totalPages={pageCount}\n          /> \n        </Table.HeaderCell>\n      </Table.Row>\n    </Table.Footer>\n  </Table>\n  </>\n  );\n}\n\nexport default Data;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  Image,\n  Icon\n} from 'semantic-ui-react';\n\n\nexport type UserProps = {\n  name: string;\n  surname: string;\n  email: string;\n  country: string;\n  phone: string;\n  salary: null | number;\n  degree: null | string;\n  department: null | string;\n}\n\nexport default function User(props: UserProps) {\n  const [image, setImage] = useState<string>(\"\");\n  const { name, surname, email, country, phone, salary, degree, department } = props;\n\n  useEffect(() => {\n    fetch(\"https://randomuser.me/api/\")\n      .then((res) => res.json())\n      .then((data) => setImage(data.results[0].picture.medium));\n  }, []);\n\n  return (\n    <Card>\n     <Card.Content>\n      <Image\n        floated='right'\n        size='mini'\n        rounded\n        src={image}\n      />\n      <Card.Header>{name + \" \" + surname}</Card.Header>\n      <Card.Meta>{email}</Card.Meta>\n      <Card.Meta>{phone}</Card.Meta>\n      <Card.Description>From {country}</Card.Description>\n      {degree && <Card.Description>{`Doctor, ${degree}`}</Card.Description>}\n      {department && <Card.Description>{`Works as a public servant in department ${department}`}</Card.Description>}\n    </Card.Content> \n    <Card.Content extra>\n      <Icon name='dollar' />{salary}/year\n    </Card.Content>\n    <Card.Content extra>\n      <Icon name='map pin' />{country}\n    </Card.Content>\n    </Card>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Card\n} from 'semantic-ui-react';\nimport User, { UserProps } from '../components/User'\n\n\nfunction Users() {\n  const email: undefined | string = useParams().email;\n  const [users, setUsers] = useState<UserProps[]>([]);\n\n  function getUsers(email?: string) {\n    const url = \"/api/v1/users\" + ((email !== undefined) ? `?email=${email}` : \"\");\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n          setUsers(data);\n      });\n  }\n\n  useEffect(() => {\n    getUsers(email);\n  }, [email]);\n\n  return (\n    <Card.Group centered>\n    {users && users.map((user: UserProps) => <User key={user.email} {...user} />)}\n    </Card.Group>\n  );\n}\n\nexport default Users;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { Menu, Container, Image } from 'semantic-ui-react'\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nimport Data from './views/Data'\nimport Users from './views/Users'\nimport logo from './logo.svg'\n\n\nfunction App() {\n  return (\n    <>\n      <Router>\n      <Menu inverted>\n        <Container>\n          <Menu.Item as={Link} to='/' header>\n            <Image size='mini' src={logo} style={{ marginRight: '1.5em' }} />\n            DB HW\n          </Menu.Item>\n          <Menu.Item as={Link} to='/'>Data</Menu.Item>\n          <Menu.Item as={Link} to='/users'>Users</Menu.Item>\n        </Container>\n      </Menu>\n      <Container>\n        <Routes>\n          <Route index element={<Data />} />\n          <Route path=\"users\" element={<Users />} />\n          <Route path=\"users/:email\" element={<Users />} />\n        </Routes>\n      </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}